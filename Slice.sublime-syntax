%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Slice
file_extensions: [ice]
scope: source.slice

contexts:
  main:
    - include: core

  core:
    - include: storage
    - include: metadata
    - include: numbers
    - include: strings
    - include: control
    - include: preprocessor
    - include: expression

  storage:
    - match: '\b(exception|local|struct|enum|throws)\b'
      scope: storage.type.slice
    - match: '\b(bool|extends|LocalObject|string|byte|false|long|float|module|throws|const|idempotent|Object|true|dictionary|implements|optional|void|double|int|out|sequence|exception|local|short)\b'
      scope: storage.type.slice
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.slice

  expression:
    - include: interface-definition
    # - include: function-definition

  prototype:
    - include: comments

  curly-brackets:
    - match: '{'
      scope: meta.brace.curly.begin.slice
      push:
        - meta_scope: meta.group.braces.curly.slice
        - match: '}'
          scope: meta.brace.curly.end.slice
          pop: true
        - include: core

  round-brackets:
    - match: '\('
      scope: meta.brace.round.begin.slice
      push:
        - meta_scope: meta.group.braces.round.slice
        - match: '\)'
          scope: meta.brace.round.end.slice
          pop: true
        - include: core

  brackets:
    - include: round-brackets
    - include: curly-brackets

  control:
    - match: '\b(module)\b'
      scope: keyword.control.module.slice
      push:
        - meta_scope: meta.module.slice
        - include: brackets
        - include: core

  preprocessor:
    - match: ^\s*(#)\s*(pragma|define|include|ifdef|ifndef|endif)\b
      scope: keyword.other.preprocessor.directive.slice
      push:
        - match: '\s*<(.*)>'
          captures:
            1: string.quoted.other.include.slice
          pop: true
        - match: '\b(.*)$\b'
          scope: meta.preprocessor.slice
          pop: true

  metadata:
    - match: '\[(\[)?'
      scope: meta.metadata.begin.slice
      push:
        - meta_scope: meta.metadata.slice
        - include: strings
        - match: '\](\])?'
          scope: meta.metadata.end.slice
          pop: true

  comments:
    - match: '//'
      push:
        - meta_scope: comment.line.slice
        - match: $
          pop: true

    - match: '/\*\*(?!/)'
      scope: punctuation.definition.comment.begin.slice
      push:
        - meta_scope: comment.block.documentation.slice
        - match: '\*/'
          scope: punctuation.definition.comment.end.slice
          pop: true

    - match: '/\*'
      scope: punctuation.definition.comment.begin.slice
      push:
        - meta_scope: comment.block.documentation.slice
        - match: '\*/'
          scope: punctuation.definition.comment.end.slice
          pop: true

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape character
    - match: '"'
      scope: punctuation.definition.string.begin.slice
      push:
        - meta_scope: string.quoted.double.slice
        - match: '\\.'
          scope: constant.character.escape.slice
        - match: '"'
          scope: punctuation.definition.string.end.slice
          pop: true

  interface-definition:
    - match: \b(interface|class)\b
      captures:
        1: storage.type.interface.slice
        2: storage.type.class.slice
      scope: storage.type.class.slice
      set: [interface-body, interface-name]

  interface-name:
    - match: \w+
      scope: entity.name.class.slice
      set:
        - include: interface-extends
        - match: (?=\s*[{;])
          pop: true

  interface-extends:
    - match: \bextends\b
      scope: storage.type.slice
      set:
        - match: (?=\s*[{;])
          pop: true

  interface-body:
    - meta_scope: meta.class.slice
    - match: '{'
      scope: punctuation.definition.interface.body.begin.slice
      push:
        - match: '}'
          scope: punctuation.definition.interface.end.begin.slice
          pop: true
        - include: preprocessor
        - include: storage
        - include: strings
        - include: function-definition
        - include: brackets
    - match: (?<=[};])
      pop: true

  function-definition:
    - match: '(\w+)\s*\('
      captures:
        1: entity.name.function.slice
      push:
        - match: '\)'
          pop: true
        - include: core
